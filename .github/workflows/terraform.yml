name: 'terraform'
on:
  pull_request:

env:
  dir: ./deployment
     
jobs:
  terraform-plan:
    name: 'Terraform Validate, Init and Plan'
    runs-on: ubuntu-latest
    environment: "env"
    steps:
      - name: 'Checkout'
        uses: actions/checkout@master

    #   - name: 'Install dependancies'
    #     run: |
    #       sudo apt-get install jq awscli -y
    #       alias convert_report="jq -r '([.resource_changes[]?.change.actions?]|flatten)|{\"create\":(map(select(.==\"create\"))|length),\"update\":(map(select(.==\"update\"))|length),\"delete\":(map(select(.==\"delete\"))|length)}'"
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      
    #   - name: Configure AWS credentials
    #     if: ${{ inputs.provider == 'aws' }}
    #     uses: aws-actions/configure-aws-credentials@v2
    #     with:
    #       aws-access-key-id: ${{ secrets.aws-access-key-id }}
    #       aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
    #       aws-region: ${{ inputs.aws-region }}
      
      - name: Az CLI login
        uses: azure/login@v1
        with:
            creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'

      - name: Terraform Init
        id: init
        run: terraform -chdir=$dir  init   

      - name: 'Terraform Format fmt'
        id: fmt
        run: |
          cd $dir 
          terraform fmt --diff

      - name: terraform validate
        id: validate
        uses: dflook/terraform-validate@v1
        with:
          path: "$dir"
          #backend_config: token=${{ secrets.ROLE_ARN }}
      
      - name: Validate failed
        if: ${{ failure() && steps.validate.outputs.failure-reason == 'validate-failed' }}
        run: |
          echo "terraform validate failed"
          echo "Reason: ${{ steps.validate.outputs.failure-reason }}"

    #   - name: 'Terraform initialization'
    #     id: init
    #     env:
    #       backend_config: token=${{ secrets.ROLE_ARN }}
    #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     run: |
    #       cd terraform/nonprod/us-west-2
    #       terraform init \
    #       -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
    #       -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \

      # - name: Terraform Plan
      #   id: plan
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     JSON_PLAN_FILE: tfplan.json
      #   if: github.event_name == 'pull_request'
      #   run: terraform -chdir=./terraform/nonprod/us-west-2 plan -out tfplan
      #   continue-on-error: true
      
      - name: Terraform Plan
        id: plan
        env:
          # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          JSON_PLAN_FILE: tfplan.json
        if: github.event_name == 'pull_request'
        run: terraform -chdir=$dir  plan -out tfplan
        continue-on-error: true
      
      # Save plan to artifacts  
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: tfplan

      # Create string output of Terraform Plan
      - name: Create String Output
        id: tf-plan-string
        run: |
          cd $dir 
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
          echo "${{ steps.tf-plan-string.outputs.summary }}" >> $GITHUB_STEP_SUMMARY
    
      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
        with:
          github-token: ${{ secrets.GITHUB }}
          script: |
            const output = `#### Terraform Format and Style for "main" üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.SUMMARY}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform -chdir=$dir apply -auto-approve 